name: Build, deploy & test

on:
  pull_request:
    branches:
      - main

jobs:
  build-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Wait for Instance to be Ready
        run: |
          until gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "echo 'Instance is up'"; do
            echo 'Waiting for the instance to be ready...'
            sleep 10
          done
          echo 'Instance is ready!'

      - name: Clear remote directory
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "rm -rf /home/runner/*"

      - name: Copy updated repository to remote server
        run: gcloud compute scp --recurse /home/runner/work/tau-workers/tau-workers ${{ env.GCP_GPU_NAME }}:/home/runner/tau-workers --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Run script on remote server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "export BUILD_ID=${{ github.run_id }}; docker login --username=${{ secrets.DOCKER_USER }} --password=${{ secrets.DOCKER_PASSW }}; cd /home/runner/tau-workers && chmod +x ./build-docker-ci-remote.sh && bash ./build-docker-ci-remote.sh"
        env:
          BUILD_ID: ${{ github.run_id }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSW: ${{ secrets.DOCKER_PASSW }}
          
      - name: Stop all running containers - preparing for deployment
        run: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
            CONTAINERS=\$(docker ps -q)
            if [ -z \"\$CONTAINERS\" ]; then
              echo 'No containers to stop.'
            else
              docker stop \$CONTAINERS || echo 'Failed to stop some containers, but continuing.'
            fi"

  deploy-gcp-jobs:  
    needs: build-all
    runs-on: ubuntu-latest
    outputs:
      gcp-workflow: ${{ steps.set_config.outputs.gcp-workflow }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh
      
      - name: Set the GCP_ENABLED variable
        id: set_config
        run: |
          echo "gcp-workflow=${{ env.GCP_ENABLED }}" >> $GITHUB_OUTPUT

  deploy-runpod-jobs:
    needs: build-all
    runs-on: ubuntu-latest
    outputs:
      runpod-workflow: ${{ steps.set_config.outputs.runpod-workflow }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh
      
      - name: Set the GCP_ENABLED variable
        id: set_config
        run: |
          echo "runpod-workflow=${{ env.RUNPOD_ENABLED }}" >> $GITHUB_OUTPUT

  gcp-deploy-orchestrator:
    if: needs.deploy-gcp-jobs.outputs.gcp-workflow == 'true'
    needs: deploy-gcp-jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Start orchestrator server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker run -d --gpus all --runtime=nvidia -p ${{ env.ORCH_PORT }}:${{ env.ORCH_PORT }} -p ${{ env.LLM_PORT }}:${{ env.LLM_PORT }} corcelio/cicd:orchestrator-${{ github.run_id }}"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}  
          LLM_PORT: ${{ env.LLM_PORT }}  

      - name: Wait for Orchestrator to be ready 
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 localhost:${{ env.ORCH_PORT }}/docs; do \
            echo 'Waiting for the Orchestrator to be ready...'; \
            sleep 10; \
          done; \
          echo 'Orchestrator is ready!'"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}
        timeout-minutes: 15

  gcp-test-orchestrator-image:
    needs: gcp-deploy-orchestrator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_ORCH_TXT2IMG }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_ORCH_TXT2IMG }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Orchestrator - Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -X POST localhost:${{ env.ORCH_PORT }}/check-result \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_ORCH_TXT2IMG }}"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}
    
  gcp-test-orchestrator-avatar:
    needs: gcp-test-orchestrator-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data to remote
        run: gcloud compute scp --recurse /home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_ORCH_AVATAR }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_ORCH_AVATAR }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Orchestrator - Image - Avatar
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.IMAGE_PORT }}/avatar \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_ORCH_AVATAR }}"
        env:
          LLM_PORT: ${{ env.IMAGE_PORT }}

  gcp-stop-test-orch:
    needs: gcp-test-orchestrator-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker stop \$(docker ps -q)"

  gcp-deploy-llm:
    needs: gcp-stop-test-orch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Start LLM server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker run -d --gpus all --runtime=nvidia -p ${{ env.LLM_PORT }}:${{ env.LLM_PORT }} corcelio/cicd:llm-server-${{ github.run_id }}"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}  

      - name: Wait for LLM server to be ready
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 -v localhost:${{ env.LLM_PORT }}/docs; do \
            echo 'Waiting for the LLM server to be ready...'; \
            sleep 10; \
          done; \
          echo 'LLM server is ready!'"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}
        timeout-minutes: 15
  
  gcp-test-llm:
    needs: gcp-deploy-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_LLM_LOAD }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_LLM_LOAD }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp LLM server - load small model
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.LLM_PORT }}/load_model \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_LLM_LOAD }}"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}
      
      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_LLM_QUERY }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_LLM_QUERY }} --zone ${{ env.GCP_GPU_ZONE }}

      - name: Test gcp LLM server - query model
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.LLM_PORT }}/generate_text \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_LLM_QUERY }}"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}
      
  gcp-stop-test-llm:
    needs: gcp-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker stop \$(docker ps -q)"

  gcp-deploy-image:
    needs: gcp-stop-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Start Image server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker run -d --gpus all --runtime=nvidia -p ${{ env.IMAGE_PORT }}:${{ env.IMAGE_PORT }} corcelio/cicd:image-server-${{ github.run_id }}"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}  

      - name: Wait for Image server to be ready
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 -v localhost:${{ env.IMAGE_PORT }}/docs; do \
            echo 'Waiting for the Image server to be ready...'; \
            sleep 10; \
          done; \
          echo 'Image server is ready!'"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}
        timeout-minutes: 15

  gcp-test-image:
    needs: gcp-deploy-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_IMAGE_TXT2IMG }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_IMAGE_TXT2IMG }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Image server
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.IMAGE_PORT }}/txt2img \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_IMAGE_TXT2IMG }}"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}
  
  gcp-test-image-avatar:
    needs: gcp-test-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_IMAGE_AVATAR }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_IMAGE_AVATAR }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Image server - Avatar
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.IMAGE_PORT }}/avatar \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_IMAGE_AVATAR }}"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}
  
  gcp-stop-test-image:
    needs: gcp-test-image-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh
          
      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker stop \$(docker ps -q)"
  
  runpod-deploy-orchestrator:
    if: needs.deploy-runpod-jobs.outputs.runpod-workflow == 'true'
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          instance_id=$(python ci-tests/runpod-create.py ${{ secrets.RUNPOD_MANAGER_API_KEY }} "v-workers-cicd-orch-${{ github.run_id }}" "${{ env.RUNPOD_GPU_TYPE }}" "corcelio/cicd:orchestrator-${{ github.run_id }}" "${{ env.ORCH_PORT }}")
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 40
        
  runpod-test-orch-llm:
    needs: runpod-deploy-orchestrator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Test Runpod Orchestrator - LLM task - llama3
        id: test-runpod-orch
        run: |
          response=$(python ci-tests/runpod_orch_test.py runpod_orch_test_llm \
            "${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}" \
            "${{ env.ORCH_PORT }}" \
            "/home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_ORCH_LLM_LLAMA3 }}")
          echo "Response: $response"
        timeout-minutes: 30

      - name: Test Runpod Orchestrator - LLM task - finetune
        id: test-runpod-orch
        run: |
          response=$(python ci-tests/runpod_orch_test.py runpod_orch_test_llm \
            "${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}" \
            "${{ env.ORCH_PORT }}" \
            "/home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_ORCH_LLM_FINETUNE }}")
          echo "Response: $response"
        timeout-minutes: 30
    outputs:
      instance_id: ${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}
      response: ${{ steps.test-runpod-orch.outputs.response }}
  
  runpod-test-orch-image:
    needs: runpod-test-orch-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Test Runpod Orchestrator - Image
        id: test-runpod-orch-image
        run: |
          response=$(python ci-tests/runpod_orch_test.py runpod_orch_test_image \
            "${{ needs.runpod-test-orch-llm.outputs.instance_id }}" \
            "${{ env.ORCH_PORT }}" \
            "/home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_ORCH_TXT2IMG }}")
          echo "Response: $response"
        timeout-minutes: 15
    outputs:
      instance_id: ${{ needs.runpod-test-orch-llm.outputs.instance_id }}
      response: ${{ steps.test-runpod-orch-image.outputs.response }}

  runpod-destroy-orch:
    needs: runpod-test-orch-image
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Orchestrator runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-orch-image.outputs.instance_id }} \
                -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

  runpod-deploy-llm-server:
    if: needs.deploy-runpod-jobs.outputs.runpod-workflow == 'true'
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          sleep 5
          instance_id=$(python ci-tests/runpod-create.py ${{ secrets.RUNPOD_MANAGER_API_KEY }} "v-workers-cicd-llm-${{ github.run_id }}" "${{ env.RUNPOD_GPU_TYPE }}" "corcelio/cicd:llm-server-${{ github.run_id }}" "${{ env.LLM_PORT }}")
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 30

  runpod-test-llm:
    needs: runpod-deploy-llm-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Load model
        id: load-model
        run: |
          response=$(python ci-tests/runpod_llm_test.py "load_model" \
            "${{ needs.runpod-deploy-llm-server.outputs.instance_id }}" \
            "${{ env.LLM_PORT }}" \
            "/home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_LLM_LOAD }}")
          echo "Response: $response"
        timeout-minutes: 20

      - name: Test Runpod LLM
        id: test-runpod-llm
        run: |
          response=$(python ci-tests/runpod_llm_test.py test_llm \
            "${{ needs.runpod-deploy-llm-server.outputs.instance_id }}" \
            "${{ env.LLM_PORT }}" \
            "/home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_LLM_QUERY }}")
          echo "Response: $response"
        timeout-minutes: 15

    outputs:
      instance_id: ${{ needs.runpod-deploy-llm-server.outputs.instance_id }}
      load_model_response: ${{ steps.load-model.outputs.response }}
      test_llm_response: ${{ steps.test-runpod-llm.outputs.response }}

  runpod-destroy-llm:
    needs: runpod-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Orchestrator runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-llm.outputs.instance_id }} \
                -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

  runpod-deploy-image-server:
    if: needs.deploy-runpod-jobs.outputs.runpod-workflow == 'true'
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          sleep 10
          instance_id=$(python ci-tests/runpod-create.py ${{ secrets.RUNPOD_MANAGER_API_KEY }} "v-workers-cicd-img-${{ github.run_id }}" "${{ env.RUNPOD_GPU_TYPE }}" "corcelio/cicd:image-server-${{ github.run_id }}" "${{ env.IMAGE_PORT }}")
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 40
  
  runpod-test-image:
    needs: runpod-deploy-image-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Test Runpod Image
        id: test-runpod-image
        run: |
          response=$(python ci-tests/runpod_image_test.py test_runpod_image \
            "${{ needs.runpod-deploy-image-server.outputs.instance_id }}" \
            "${{ env.IMAGE_PORT }}" \
            "/home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_IMAGE_TXT2IMG }}")
          echo "Response: $response"
        timeout-minutes: 15

    outputs:
      instance_id: ${{ needs.runpod-deploy-image-server.outputs.instance_id }}
      response: ${{ steps.test-runpod-image.outputs.response }}
  
  runpod-test-image-avatar:
    needs: runpod-test-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Test Runpod Image - Avatar
        id: test-runpod-image-avatar
        run: |
          response=$(python ci-tests/runpod_image_test.py test_runpod_image_avatar \
            "${{ needs.runpod-test-image.outputs.instance_id }}" \
            "${{ env.IMAGE_PORT }}" \
            "/home/runner/work/tau-workers/tau-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_IMAGE_AVATAR }}")
          echo "Response: $response"
        timeout-minutes: 15

    outputs:
      instance_id: ${{ needs.runpod-test-image.outputs.instance_id }}
      response: ${{ steps.test-runpod-image-avatar.outputs.response }}

  runpod-destroy-image:
    needs: runpod-test-image-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Image runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-image-avatar.outputs.instance_id }} \
               -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1